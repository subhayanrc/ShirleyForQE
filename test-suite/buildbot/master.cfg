#
# 2016-2018 : Samuel Ponce' and Martin Schlipf
#
# This is the CINECA buildmaster config file. It must be installed as
# 'master.cfg' in the buildmaster's base directory.

import re, time
import itertools

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

qe_project = 'https://gitlab.com/QEF/q-e.git'
projects = ['https://gitlab.com/QEF/q-e.git']

passwd = {
    'source': '',
    'farmer-slave2': 'XXXXXXXXXXXXXXXXX',
}

from buildbot.locks import MasterLock
source_lock = MasterLock('source')

slave_builders = { "farmer-slave2": ["farmer_gcc640_serial","farmer_gcc640_para",\
                                     "farmer_intel17_impi","farmer_pgi17_mvapich23b","farmer_intel12_openmpi"]}

slaves = slave_builders.keys()
builders = list( itertools.chain.from_iterable( slave_builders.values() ) )
print builders

def getslavebybuilders(b):
        for s in slaves:
                for i in range(len(slave_builders[s])):
                        if b == slave_builders[s][i]:
                                return s
        return None

builder_epw = []
builder_sgw = []
builder_wan = []
for v in builders:
  builder_epw.extend(["%s-%s" % ('QE', v)])
  builder_sgw.extend(["%s-%s" % ('SGW', v)])
  builder_wan.extend(["%s-%s" % ('WAN', v)])

builder_qe = builder_epw + builder_sgw
builder_all = builder_epw + builder_sgw + builder_wan #+ builder_test

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [
    BuildSlave('farmer-slave2', passwd['farmer-slave2'],max_builds=1, keepalive_interval=120),
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller

c['change_source'] = []
c['change_source'].extend([
        GitPoller(
            project='quantum_espresso',
            repourl='https://gitlab.com/QEF/q-e.git',
            branches=['develop'],
            workdir='gitpoller_QE',
            category='qe_update',
        )])# for i, name in enumerate(projects))
c['change_source'].extend([
        GitPoller(
            project='sternheimer_gw',
            repourl='https://github.com/mmdg-oxford/SternheimerGW.git',
            branches=['develop'],
            workdir='gitpoller_SGW',
            category='sgw_update',
        )])
c['change_source'].extend([
        GitPoller(
            project='wannier90',
            repourl='https://github.com/wannier-developers/wannier90.git',
            branches=['develop'],
            workdir='gitpoller_WAN',
            category='wan_update',
        )])


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

# buildbot version 0.8.5
from buildbot.changes.filter import ChangeFilter
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.timed import Nightly
c['schedulers'] = []
c['schedulers'].extend([
        Nightly(
          name = 'QE' + '-nightly',
          change_filter=ChangeFilter(
              project = 'quantum_espresso',
              category = 'qe_update',
              branch = ['develop'],
          ),
          onlyIfChanged = True,
          hour = 2,
          minute = 0,
          builderNames=builder_qe,
          createAbsoluteSourceStamps = True,
        )
])
c['schedulers'].extend([
        Nightly(
          name = 'SGW' + '-nightly',
          change_filter=ChangeFilter(
              project = 'sternheimer_gw',
              category = 'sgw_update',
              branch = ['develop'],
          ),
          onlyIfChanged = True,
          hour = 2,
          minute = 0,
          builderNames=builder_sgw,
          createAbsoluteSourceStamps = True,
        )
])
c['schedulers'].extend([
        Nightly(
          name = 'WAN' + '-nightly',
          change_filter=ChangeFilter(
              project = 'wannier90',
              category = 'wan_update',
              branch = 'develop',
          ),
          branch = 'develop',
          onlyIfChanged = True,
          hour = 2,
          minute = 0,
          builderNames=builder_wan,
          createAbsoluteSourceStamps = True,
        )
])

#
# buildbot version 0.8.6p1
# SP: Seems to not work with 0.9.9

from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.plugins import schedulers, util

c['schedulers'].extend([
  ForceScheduler(
    name='force',
    builderNames=builder_all,
    reasonString='%(reason)s',
    codebases=[
      util.CodebaseParameter(
        "",
        name='branch',
        branch=util.ChoiceStringParameter(
            name="branch",
            choices=["develop"],
            default="develop"),
        # Remove the fields 
        revision=util.FixedParameter(name="revision", default=""),
        repository=util.FixedParameter(name="repository", default=""),
        project=util.FixedParameter(name="project", default=""),
      )
    ],
  )])

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.config import BuilderConfig
from buildbot.plugins import steps 
from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Compile

c['builders'] = []

for name in projects:
  for BuilderID in builders:
        with open( '%s.cfg' % BuilderID ) as fn:
                exec fn
        c['builders'].append(
                BuilderConfig(
                        name= '%s-%s' % ('QE',BuilderID), 
                        slavename=getslavebybuilders(BuilderID),
                        factory=f,
                )
        )
  for BuilderID in builders:
        with open( '%s.cfg' % BuilderID ) as fn:
                exec fn
        c['builders'].append(
                BuilderConfig(
                        name= '%s-%s' % ('SGW',BuilderID), 
                        slavename=getslavebybuilders(BuilderID),
                        factory=f_SGW,
                )
        )
  for BuilderID in builders:
        with open( '%s.cfg' % BuilderID ) as fn:
                exec fn
        c['builders'].append(
                BuilderConfig(
                        name= '%s-%s' % ('WAN',BuilderID), 
                        slavename=getslavebybuilders(BuilderID),
                        factory=f_WAN,
                )
        )





####### STATUS TARGETS
# New version

from buildbot.plugins import util

c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={},
                console_view={}),
                auth=util.UserPasswordAuth({"admin": "qeffarm"}) )

email = ['samuel.pon@gmail.com','martin.schlipf@gmail.com','p.giannozzi@gmail.com',\
         'degironc@sissa.it','baroni@sissa.it','feliciano.giustino@materials.ox.ac.uk',\
         'pdelugas@sissa.it','p.bonfa@cineca.it','andrea.ferretti@nano.cnr.it',\
         'dalcorso@sissa.it','brunato@sissa.it','icarnimeo@sissa.it',\
         'lercole@sissa.it','fgrassel@sissa.it',\
         'c.cavazzoni@cineca.it','akaithal@sissa.it' ]


from buildbot.plugins import reporters
c['services'] = []
mn = reporters.MailNotifier(fromaddr="testfarmqef@gmail.com",
                            sendToInterestedUsers=True,
                            extraRecipients=email,
                            relayhost="smtp.gmail.com",
                            smtpUser="testfarmqef@gmail.com",
                            mode=('failing'),
                            useSmtps=True,
                            smtpPort=465, 
                            builders=builder_epw, 
                            subject='Test-farm failing',
                            smtpPassword="QEFtestfarm")
c['services'].append(mn)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "QEF_FARM"
c['titleURL'] = "http://foundation.quantum-espresso.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://130.186.13.198:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
