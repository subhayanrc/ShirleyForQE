#! @SHELL@
#
#        Copyright (C) 2000-2017 the YAMBO team
#              http://www.yambo-code.org
#
# Authors (see AUTHORS file for details): AM
# 
# This file is distributed under the terms of the GNU 
# General Public License. You can redistribute it and/or 
# modify it under the terms of the GNU General Public 
# License as published by the Free Software Foundation; 
# either version 2, or (at your option) any later version.
#
# This program is distributed in the hope that it will 
# be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A 
# PARTICULAR PURPOSE.  See the GNU General Public License 
# for more details.
#
# You should have received a copy of the GNU General Public 
# License along with this program; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place - Suite 330,Boston, 
# MA 02111-1307, USA or visit http://www.gnu.org/copyleft/gpl.txt.
#
os="@build_os@"
cpp="@CPP@"
fpp="@FPP@"
cppflags="@CPPFLAGS_yambo@"
ECHO_N="@ECHO_N@"
PREFIX="@MKMF_PREFIX@"
KEEPSRC="@enable_keep_src@"
#
if [ $# = 0 ] ; then
 echo $0 "dir target objectfile mode(l/x) Dflag1 Dflag2 Dflag3 ..."
 exit 0
fi
cdir=$1
target=$2
ofile=$3
mode=$4
libs=$5
if [ ! -f $cdir/$ofile ]; then exit 0; fi
if [ -f $cdir/Makefile ] ; then rm -f $cdir/Makefile ;  fi
#
llibs=""
lock_file="__lock"
dep_file="make.dep"
for arg in $@; do
 case $arg in
  -D_MPI)
   dmpi="yes" ;
   dopts="$dopts $arg";
   ;;
  -D_64BIT_OFFSET)
   dopts="$dopts $arg";
   ;;
  -D_*) 
   dopts="$dopts $arg"
   a=`echo $arg  | sed "s/-/_/"`
   lock_file="$lock_file$a"
   ;;
  -l*) 
   llibs="$arg $llibs"
   ;;
 esac
done
#
llibs="-L\$(libdir) $llibs"
lf90include="@F90_MODULE_FLAG@\$(includedir) @F90_MODULE_FLAG@\$(sysinclude)"
linclude="-I\$(includedir) -I\$(sysinclude)"
if [ @F90_MODULE_FLAG@ != "-I" ]; then
lf90include="$lf90include $linclude"
fi
llibinclude="\$(inetcdff) \$(inetcdf) \$(ihdf5) \$(ilibxc) \$(ifft)"
#
case $target in
  yambo*)
   llibs="$llibs -lslatec -llocal \$(lscalapack) \$(llapack) \$(lblacs) \$(lblas)"
   llibs="$llibs \$(lnetcdff) \$(lnetcdf) \$(lhdf5) \$(llibxc) \$(lfft) -lm"
   linclude="$linclude \$(inetcdff) \$(inetcdf) \$(ihdf5) \$(ilibxc) \$(ifft)"
    ;;
  a2y|elk2y|c2y)
   llibs="-lint_modules $llibs -llocal \$(lscalapack) \$(llapack) \$(lblacs) \$(lblas) \$(lnetcdff) \$(lnetcdf) \$(lhdf5) \$(llibxc) \$(lfft) -lm"
   linclude="$linclude \$(inetcdff) \$(inetcdf) \$(ihdf5) \$(ilibxc)"
    ;;
  p2y*)
   llibs="-lint_modules $llibs -llocal \$(liotk) \$(lscalapack) \$(llapack) \$(lblacs) \$(lblas) \$(lnetcdff) \$(lnetcdf) \$(lhdf5) \$(llibxc) \$(lfft) -lm"
   linclude="$linclude \$(iiotk) \$(inetcdff) \$(inetcdf) \$(ihdf5) \$(ilibxc)"
    ;;
  e2y)
   llibs="-lint_modules $llibs -llocal \$(letsf) \$(lscalapack) \$(llapack) \$(lblacs) \$(lblas) \$(lnetcdff) \$(lnetcdf) \$(lhdf5) \$(llibxc) \$(lfft) -lm"
   linclude="$linclude \$(ietsf) \$(inetcdff) \$(inetcdf) \$(ihdf5) \$(ilibxc)"
    ;;
  ypp*)
   llibs="$llibs -llocal -lslatec \$(lscalapack) \$(llapack) \$(lblacs) \$(lblas) \$(lnetcdff) \$(lnetcdf) \$(lhdf5) \$(llibxc) \$(lfft) -lm"
   linclude="$linclude \$(inetcdff) \$(inetcdf) \$(ihdf5) \$(ilibxc) \$(ifft)"
    ;;
esac

cat config/setup >>$cdir/Makefile
echo "llibs=$llibs" >> $cdir/Makefile
echo "linclude=$linclude" >> $cdir/Makefile
echo "llibinclude=$llibinclude" >> $cdir/Makefile
echo "lf90include=$lf90include $llibinclude" >> $cdir/Makefile
echo "mfiles=find . -name '*.mod'" >> $cdir/Makefile
echo "target=$target" >> $cdir/Makefile
echo "dmpi=$dmpi" >> $cdir/Makefile
echo "dopts=$dopts -D_\$(os)" >> $cdir/Makefile
echo "lock_file=$lock_file" >> $cdir/Makefile
echo "dep_file=$dep_file" >> $cdir/Makefile
cp $cdir/$ofile $cdir/$ofile.c
$cpp $cppflags $dopts -D_$os -D_$target $cdir/$ofile.c >> $cdir/Makefile
rm -f $cdir/$ofile.c

if [ "$mode" = "x" ] ; then 
cat << EOF >> $cdir/Makefile
\$(target): \$(dep_file) \$(objs)
	\$(driver)\$
	\$(link)\$
	\$(modmove)\$ 
	\$(dircheck)\$
	@mv \$@ \$(exec_prefix)
EOF
else 
rm -f ./lib/$target
cat << EOF >> $cdir/Makefile
\$(target): \$(dep_file) arcreate
	\$(modmove)\$ 
EOF
fi

cat << EOF >> $cdir/Makefile
\$(lock_file):
	${PREFIX}if test ! -f \$(lock_file) && test "\$(keep_objs)" = "no" ; then \
	find . \( -name '*.o' -o -name '*.mod' -o -name '__*' \) | xargs rm -f ; \
	touch \$(lock_file); rm -f \$(dep_file); fi
	${PREFIX}if test "\$(keep_objs)" = "yes"; \
	then \$(prefix)/sbin/objects_store.sh \$(lock_file); rm -f \$(dep_file); fi

\$(dep_file): \$(lock_file)
	cd \$(srcdir)/$cdir; \$(srcdir)/sbin/moduledep.sh \$(objs) > \$(prefix)/$cdir/\$(dep_file)

arcreate: \$(objs)
	${PREFIX}(eval \$(ar) \$(arflags) \$(target) \$(objs)) > /dev/null
	${PREFIX}mv \$(target) \$(libdir) ; chmod u+x \$(libdir)/\$(target)
#
# Functions
#
define driver
 ${PREFIX}if test -f \$(prefix)/driver/yambo.h; then \$(cpp) \$(cppflags) \$(dopts) \
                    \$(prefix)/driver/yambo.h > \$(prefix)/driver/yambo_cpp.h; fi
 ${PREFIX}if test -f \$(prefix)/driver/ypp.h; then \$(cpp) \$(cppflags) \$(dopts) \
                   \$(prefix)/driver/ypp.h > \$(prefix)/driver/ypp_cpp.h; fi
 ${PREFIX}( eval \$(cc) \$(cflags) -c \$(prefix)/driver/getopt.c > /dev/null)
 ${PREFIX}( eval \$(cc) \$(cflags) \$(dopts) -D_\$@ -c \$(prefix)/driver/driver.c > /dev/null)
 ${PREFIX}rm -f \$(prefix)/driver/yambo_cpp.h \$(prefix)/driver/ypp_cpp.h
 @echo
endef
define link
 ${PREFIX}(eval \$(fc) \$(fcflags) \$(lf90include) -o \$@ driver.o getopt.o \$(objs) \$(llibs) ) > /dev/null
endef
define modmove
 ${PREFIX}test \`\$(mfiles) | wc -l\` -eq 0 || mv *.mod \$(includedir)
endef
define dircheck
 ${PREFIX}if test ! -d \$(exec_prefix); then mkdir \$(exec_prefix);fi
endef
#
# Sources that do not want optimization
#
F77_NOOPT_SRC= xerbla.o slamch.o
#
\$(F77_NOOPT_SRC):
	${PREFIX}(eval \$(f77) -c \$(fuflags) \$(srcdir)/$cdir/\$*.f) > /dev/null
#
FC_NOOPT_SRC= mod_parser_m.o mod_logo.o
#
\$(FC_NOOPT_SRC):
	@rm -f \$*\$(f90suffix)
	${PREFIX}(eval \$(fpp) \$(dopts) \$(srcdir)/$cdir/\$*.F > \$*\$(f90suffix)) > /dev/null
	${PREFIX}(eval \$(fc) -c \$(fcuflags) \$(lf90include) \$*\$(f90suffix)) > /dev/null
	@echo $ECHO_N \$* " "
	@rm -f \$*\$(f90suffix)
#
# Special sources
#
FC_LOCAL_SRC= sgfft.o
\$(FC_LOCAL_SRC):
	@rm -f \$*\$(f90suffix)
	${PREFIX}(eval \$(fpp) \$(dopts) \$*.F > \$*\$(f90suffix)) > /dev/null
	${PREFIX}(\$(fc) -c \$(fcflags) \$(lf90include) \$(linclude) \$*\$(f90suffix)) > /dev/null
	@echo $ECHO_N \$*".F "

#
# Suffixes
#
.SUFFIXES: .F .f90 .c .f .o .a
#
# Includes
#
-include \$(dep_file)
#
# Rules
#
EOF
rm_command="@rm -f \$*\$(f90suffix)"
if [ "$KEEPSRC" == "yes" ]; then rm_command=" "; fi ;
cat << EOF >> $cdir/Makefile
.F.o:
	@rm -f \$*\$(f90suffix)
	${PREFIX}(eval \$(fpp) \$(dopts) \$(linclude) \$(srcdir)/$cdir/\$*.F > \$*.tmp_source)
	@\$(srcdir)/sbin/replacer.sh \$*.tmp_source
	@mv \$*.tmp_source_space \$*\$(f90suffix)
	${PREFIX}(\$(fc) -c \$(fcflags) \$(lf90include) \$(linclude) \$*\$(f90suffix)) > /dev/null
	${rm_command}
	@echo $ECHO_N \$*".F "
EOF
cat << EOF >> $cdir/Makefile
.f.o:
	${PREFIX}(eval \$(f77) -c \$(fflags) \$*.f) > /dev/null
	@echo $ECHO_N \$*".f "
.c.o:
	${PREFIX}(eval \$(cc) \$(cflags) \$(dopts) \$(linclude) -c \$<) > /dev/null
	@echo $ECHO_N \$< " "
EOF
