#!/bin/bash

# run from directory where this script is
cd `echo $0 | sed 's/\(.*\)\/.*/\1/'` # extract pathname
EXAMPLE_DIR=`pwd`

# check whether echo has the -e option
if test "`echo -e`" = "-e" ; then ECHO=echo ; else ECHO="echo -e" ; fi

$ECHO
$ECHO "$EXAMPLE_DIR : starting"
$ECHO
$ECHO "This example shows how to use the SHIRLEY codes to interpolate"
$ECHO "the eigenvalues of ZnS throughout the Brillouin Zone."

# set the needed environment variables 
. ../environment_variables

# required executables and pseudopotentials
BIN_LIST="pw.x shirley_basis.x shirley_ham.x shirley_qdiagp.x"
SCRIPT_LIST="pwbands.pl diff_eigvals.pl"
PSEUDO_LIST="Zn.LDAPZ_TM.UPF S.LDAPZ_TM.UPF"

# hack to fix pseudo directory
PSEUDO_DIR="$EXAMPLE_DIR/pseudo"
SCRIPT_DIR="$EXAMPLE_DIR/../../scripts"

$ECHO
$ECHO "  executables directory: $BIN_DIR"
$ECHO "  scripts directory:     $SCRIPT_DIR"
$ECHO "  pseudo directory:      $PSEUDO_DIR"
$ECHO "  temporary directory:   $TMP_DIR"
$ECHO "  checking that needed directories and files exist...\c"

# check for directories
for DIR in "$BIN_DIR" "$PSEUDO_DIR" "$SCRIPT_DIR"; do
    if test ! -d $DIR ; then 
        $ECHO
        $ECHO "ERROR: $DIR not existent or not a directory"
        $ECHO "Aborting"
        exit 1
    fi
done
for DIR in "$TMP_DIR" "$EXAMPLE_DIR/results" ; do
    if test ! -d $DIR ; then
        mkdir $DIR
    fi
done
cd $EXAMPLE_DIR/results

# check for executables
for FILE in $BIN_LIST ; do
    if test ! -x $BIN_DIR/$FILE ; then
        $ECHO
        $ECHO "ERROR: $BIN_DIR/$FILE not existent or not executable"
        $ECHO "Aborting"
        exit 1
    fi
done

# check for scripts
for FILE in $SCRIPT_LIST ; do
    if test ! -x $SCRIPT_DIR/$FILE ; then
        $ECHO
        $ECHO "ERROR: $SCRIPT_DIR/$FILE not existent or not executable"
        $ECHO "Aborting"
        exit 1
    fi
done

# check for pseudopotentials
for FILE in $PSEUDO_LIST ; do
    if test ! -r $PSEUDO_DIR/$FILE ; then
        $ECHO
        $ECHO "ERROR: $PSEUDO_DIR/$FILE not existent or not readable"
        $ECHO "Aborting"
        exit 1
    fi
done
$ECHO " done"

# set up of input blocks
TITLE='zincblende'
PREFIX="zns"

SYSTEM="&system
    ibrav=  2, celldm(1)=10.065247
    nat=  2, ntyp= 2
    ecutwfc =110.0"

ATOMIC_SPECIES="ATOMIC_SPECIES
  Zn  65.41  Zn.LDAPZ_TM.UPF
  S   32.07   S.LDAPZ_TM.UPF"

ATOMIC_POSITIONS="ATOMIC_POSITIONS crystal
  Zn -0.125 -0.125 -0.125
  S   0.125  0.125  0.125"

# functions
# SCF calculation
function scf_calc {
  if [ $# -ne 4 ]
  then
    echo "usage: scf_calc PREFIX TMP_DIR KPTS EXE"
    exit
  fi
  declare PREFIX=$1 TMP_DIR=$2 KPTS=$3 EXE=$4

  cat > ${PREFIX}.scf.in << EOF
 &control
  calculation = 'scf'
  title = '$TITLE'
  restart_mode = 'from_scratch'
  wf_collect = .true.
  tstress = .true.
  tprnfor = .true.
  outdir = '${TMP_DIR}'
  prefix = '${PREFIX}'
  pseudo_dir = '$PSEUDO_DIR'
 /
 $SYSTEM
 /
 &electrons
  conv_thr = 1.d-12
  diagonalization = 'david'
 /
 $ATOMIC_SPECIES
 $ATOMIC_POSITIONS
 $KPTS
EOF

  $EXE < ${PREFIX}.scf.in > ${PREFIX}.scf.out || exit
}

# NSCF calculation
function nscf_calc {
  if [ $# -ne 5 ]
  then
    echo "usage: nscf_calc PREFIX TMP_DIR KPTS EXE NBND"
    exit
  fi
  declare PREFIX=$1 TMP_DIR=$2 KPTS=$3 EXE=$4 NBND=$5

  cat > ${PREFIX}.nscf.in << EOF
 &control
  calculation = 'nscf'
  title = '$TITLE'
  wf_collect = .true.
  tstress = .true.
  tprnfor = .true.
  outdir = '${TMP_DIR}'
  prefix = '${PREFIX}'
  pseudo_dir = '$PSEUDO_DIR'
 /
 $SYSTEM
  nosym = .true.
  nbnd = $NBND
 /
 &electrons
  conv_thr = 1.d-12
  diagonalization = 'cg'
 /
 $ATOMIC_SPECIES
 $ATOMIC_POSITIONS
 $KPTS
EOF

  $EXE < ${PREFIX}.nscf.in > ${PREFIX}.nscf.out || exit
}

# SHIRLEY BASIS
function shirley_basis {
  if [ $# -ne 3 ]
  then
    echo "usage: shirley_basis PREFIX TMP_DIR EXE"
    exit
  fi
  declare PREFIX=$1 TMP_DIR=$2 EXE=$3

  cat > ${PREFIX}.basis.in << EOF
 &input
  prefix = '${PREFIX}'
  outdir = '$TMP_DIR'
 /
EOF

  $EXE < ${PREFIX}.basis.in > ${PREFIX}.basis.out
}

# SHIRLEY HAMILTONIAN
function shirley_ham {
  if [ $# -ne 4 ]
  then
    echo "usage: shirley_ham PREFIX TMP_DIR KPTS EXE"
    exit
  fi
  declare PREFIX=$1 TMP_DIR=$2 KPTS=$3 EXE=$4

  cat > ${PREFIX}.ham.in << EOF
 &input
  prefix = '${PREFIX}_opt'
  outdir = '$TMP_DIR'
  updatepp = .false.
  ncpp = .true.
 /
 K_POINTS
 $KPTS
EOF

  $EXE < ${PREFIX}.ham.in > ${PREFIX}.ham.out
}

# SHIRLEY DIAGONALIZATION
function shirley_qdiag {
  if [ $# -ne 4 ]
  then
    echo "usage: shirley_qdiag PREFIX TMP_DIR KPTS EXE"
    exit
  fi
  declare PREFIX=$1 TMP_DIR=$2 KPTS=$3 EXE=$4

  cat > ${PREFIX}.qdiag.in << EOF
 &input
  prefix = '${PREFIX}_opt'
  outdir = '$TMP_DIR'
  outfile = '$PREFIX.qdiag.dump'
 /
 $KPTS
EOF

  $EXE < ${PREFIX}.qdiag.in > ${PREFIX}.qdiag.out
}


# how to run executables
PW="$PARA_PREFIX $BIN_DIR/pw.x $PARA_POSTFIX"
SHIRLEYBASIS="$PARA_PREFIX $BIN_DIR/shirley_basis.x $PARA_POSTFIX"
SHIRLEYHAM="$PARA_PREFIX $BIN_DIR/shirley_ham.x $PARA_POSTFIX"
SHIRLEYQDIAG="$PARA_PREFIX $BIN_DIR/shirley_qdiagp.x $PARA_POSTFIX"
BANDSTRUCT="$BIN_DIR/bandstruct.x"

echo "==== SCF ===="
KPTS=" K_POINTS automatic
  4 4 4 1 1 1"
scf_calc "$PREFIX" "$TMP_DIR" "$KPTS" "$PW"
if [ -e CRASH ] ; then exit ; fi

echo "==== NSCF ===="
NBND_NSCF=22
KPTS=" K_POINTS automatic
  2 2 2 0 0 0"
nscf_calc "$PREFIX" "$TMP_DIR" "$KPTS" "$PW" $NBND_NSCF
if [ -e CRASH ] ; then exit ; fi

echo "==== SHIRLEY_BASIS ===="
shirley_basis "$PREFIX" "$TMP_DIR" "$SHIRLEYBASIS"

echo "==== SHIRLEY_HAM ===="
KPT_HAM=" 4 4 4 0 0 0"
shirley_ham "$PREFIX" "$TMP_DIR" "$KPT_HAM" "$SHIRLEYHAM"

echo "==== SHIRLEY_QDIAG ===="
KPT_QDIAG=" K_POINTS
  crystal
  11
  0.0 0.0 0.0 1.0
  0.0 0.0 0.1 1.0
  0.0 0.0 0.2 1.0
  0.0 0.0 0.3 1.0
  0.0 0.0 0.4 1.0
  0.0 0.0 0.5 1.0
  0.0 0.0 0.6 1.0
  0.0 0.0 0.7 1.0
  0.0 0.0 0.8 1.0
  0.0 0.0 0.9 1.0
  0.0 0.0 1.0 1.0"
shirley_qdiag "$PREFIX" "$TMP_DIR" "$KPT_QDIAG" "$SHIRLEYQDIAG"
$BANDSTRUCT $PREFIX.qdiag.dump

echo "==== NSCF check ===="
KPTS=" K_POINTS crystal
  11
  0.0 0.0 0.0 1.0
  0.0 0.0 0.1 1.0
  0.0 0.0 0.2 1.0
  0.0 0.0 0.3 1.0
  0.0 0.0 0.4 1.0
  0.0 0.0 0.5 1.0
  0.0 0.0 0.6 1.0
  0.0 0.0 0.7 1.0
  0.0 0.0 0.8 1.0
  0.0 0.0 0.9 1.0
  0.0 0.0 1.0 1.0"
nscf_calc "$PREFIX" "$TMP_DIR" "$KPTS" "$PW" $NBND_NSCF
if [ -e CRASH ] ; then exit ; fi

echo "==== checking eigenvalue differences ===="
$SCRIPT_DIR/pwbands.pl < $PREFIX.nscf.out > $PREFIX.nscf.eig
$SCRIPT_DIR/diff_eigvals.pl $PREFIX.nscf.eig 5 $PREFIX.qdiag.dump.bandstruct 5 

$ECHO
$ECHO "$EXAMPLE_DIR : done"
